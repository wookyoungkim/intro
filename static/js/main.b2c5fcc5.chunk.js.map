{"version":3,"sources":["component/MainProject.js","routes/main.js","routes/about.js","routes/work.js","routes/wlog.js","routes/contact.js","component/SiderDemo.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","MainProject","arguments","state","proejct_list","fetch","method","dataType","headers","then","response","json","responseData","setState","catch","error","console","log","this","map","projects","name","id","img","imgage","description","React","Component","PrintProj","span","hoverable","style","width","flex","flexDirection","margin","cover","alt","props","src","title","Content","Layout","Main","height","className","padding","minHeight","display","About","Work","Wlog","Contact","Title","Typography","Footer","Sider","SiderDemo","collapsed","color","onCollapse","onSelect","selected","backgroundColor","collapsible","to","onClick","exact","path","component","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b2c5fcc5.chunk.js","sourcesContent":["import React from 'react';\nimport 'whatwg-fetch';\nimport { Card } from 'antd';\nimport { Row} from 'antd';\n\nconst { Meta } = Card;\n\n// Parent Component\nclass MainProject extends React.Component {\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tthis.state = {\n\t\t\tproejct_list:[]\n\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('http://127.0.0.1:3001/projects',{\n\t\t\tmethod: 'get',\n\t\t\tdataType: 'json',\n\t\t\theaders:{\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t\t})\n\t\t.then((response) => response.json())\n\t\t.then((responseData) => {\n\t\t\tthis.setState({proejct_list: responseData});\n\t\t})\n\t\t.catch((error)=>{\n\t\t\tconsole.log('Error fetching project',error);\n\t\t});\n\t}\n\trender() {\n\t\tlet proejct_list = this.state.proejct_list.map( (projects) => {\n\t\t\treturn <PrintProj\n\t\t\t\t\tname={projects.name}\n                    id={projects.id}\n                    img = {projects.imgage}\n\t\t\t\t\tdescription={projects.description}\n\t\t\t\t\t{...projects}/>\n\t\t});\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{proejct_list}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Child Component\nclass PrintProj extends React.Component {\n\trender() {\n\t\treturn (\n            <Row>\n                <Card span={8}\n                    hoverable\n                    style={{ width: 500, flex: 1, flexDirection: 'row', margin:'10px' }}\n                    cover={<img alt={this.props.id} src={this.props.img} />}\n                >\n                    <Meta title={this.props.name} description={this.props.description}/>\n                </Card>\n            </Row>\n\t\t);\n\t}\n}\nexport default MainProject;","import React, { Component } from 'react'; \nimport { Layout } from 'antd';\nimport MainProject from '../component/MainProject';\n\n\nconst { Content } = Layout;\n\nclass  Main extends Component { \n    render() { \n        return (\n            <div>\n                <div>Main</div>\n                <Content style={{ margin: 20, height:'100%'}} >\n                    <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                    <MainProject style={{display: 'flex'}}></MainProject>\n                    </div>\n                </Content>\n            </div>\n        );\n    } \n} \nexport default Main;\n\n","import React, { Component } from 'react'; \n\nclass About extends Component { \n    render() { \n        return <div>ABOUT</div>; \n    } \n} \nexport default About;\n\n","import React, { Component } from 'react'; \n\nclass Work extends Component { \n    render() { \n        return <div>WORK</div>; \n    } \n} \nexport default Work;\n\n","import React, { Component } from 'react'; \n\nclass Wlog extends Component { \n    render() { \n        return <div>Wlog</div>; \n    } \n} \nexport default Wlog;\n\n","import React, { Component } from 'react'; \n\nclass Contact extends Component { \n    render() { \n        return <div>CONTACT</div>; \n    } \n} \nexport default Contact;\n\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Route, Link } from 'react-router-dom';\nimport Main from '../routes/main'\nimport About from '../routes/about'\nimport Work from '../routes/work'; \nimport Wlog from '../routes/wlog'; \nimport Contact from '../routes/contact';\nimport { Typography } from 'antd';\nimport 'whatwg-fetch';\n\nconst { Title } = Typography;\nconst { Footer, Sider } = Layout;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n    color : '#fafafa',\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n  onSelect = selected => {\n    console.log(selected);\n    if (this.state.color == '#fafafa') {\n      this.setState({ color: '#ffec3d' });\n    } else {\n      this.setState({ color: '#fafafa' });\n    }\n  }\n\n  componentDidMount(){\n\t\tfetch('http://127.0.0.1:3001/projects',{\n\t\t\tmethod: 'get',\n\t\t\tdataType: 'json',\n\t\t\theaders:{\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t\t})\n\t\t.then((response) => response.json())\n\t\t.then((responseData) => {\n\t\t\tthis.setState({proejct_list: responseData});\n\t\t})\n\t\t.catch((error)=>{\n\t\t\tconsole.log('Error fetching project',error);\n\t\t});\n\t}\n\n  render() {\n\n    return (\n      <Layout style={{ minHeight: '100vh'}}>\n        <div style={{backgroundColor: '#002766', width: '30%'}}>\n          <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse} style={{backgroundColor: '#002766'}}>\n            <div className=\"logo\" >\n              <Link to=\"/\">\n                <Title style={{margin: \"30%\", color: '#fafafa' }} >W</Title>\n              </Link>\n            </div>\n            <div className=\"menu\" style={{ backgroundColor: '#002766', flex: 1, flexDirection: 'column', margin:'50%' }}>\n              <Link to=\"/about\" onClick={this.onSelect}>\n                <h1 style={{margin : \"5vh 0vh\", color : this.state.color }}>ABOUT</h1>\n              </Link>\n              <Link to=\"/work\">\n                <h1 style={{margin : \"5vh 0vh\", color : this.state.color }}>WORK</h1>\n              </Link>\n              <Link to=\"/wlog\">\n                <h1 style={{margin : \"5vh 0vh\", color : this.state.color }}>Wlog</h1>\n              </Link>\n              <Link to=\"/contact\">\n                <h1 style={{margin : \"5vh 0vh\", color : this.state.color }}>CONTACT</h1>\n              </Link>\n            </div>\n          </Sider>\n        </div>\n\n <Layout className=\"site-layout\">\n            <div className=\"route\"> \n              <Route exact path=\"/intro\" component={Main} /> \n              <Route path=\"/about\" component={About} /> \n              <Route path=\"/work\" component={Work} /> \n              <Route path=\"/wlog\" component={Wlog} /> \n              <Route path=\"/contact\" component={Contact} /> \n            </div>\n          {/* <Content style={{ margin: 20, height:'100%'}} >\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              <MainProject style={{display: 'flex'}}></MainProject>\n            </div>\n          </Content> */}\n          <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\n\nexport default SiderDemo;\n// ReactDOM.render(<SiderDemo />, mountNode);","import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\n//import logo from './logo.svg';\nimport './App.css';\n//import Nav from './component/Nav';\nimport SiderDemo from './component/SiderDemo';\n\nclass App extends Component{\n  render() {\n    return (\n      <SiderDemo></SiderDemo>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}